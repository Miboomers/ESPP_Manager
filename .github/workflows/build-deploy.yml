name: Windows & Web Build

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Permissions needed for GitHub Pages deployment
permissions:
  contents: write  # Changed from read to write for gh-pages branch creation
  pages: write
  id-token: write
  actions: read

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Firebase config for CI/CD
      shell: powershell
      run: |
        # Copy stub config as firebase_config.dart for Windows build
        Copy-Item "lib\config\firebase_config_stub.dart" -Destination "lib\config\firebase_config.dart"
        Write-Host "‚úÖ Created firebase_config.dart from stub for CI/CD build"
        Get-Content "lib\config\firebase_config.dart" | Select-Object -First 5
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
        
    - name: Enable Windows Desktop
      run: flutter config --enable-windows-desktop
        
    - name: Install dependencies
      run: flutter pub get
      
    - name: Build Windows Release
      run: flutter build windows --release
      
    - name: Create Windows Package
      shell: powershell
      run: |
        $date = Get-Date -Format "yyyyMMdd_HHmm"
        $distName = "ESPP_Manager_Windows_$date"
        
        New-Item -ItemType Directory -Path "dist" -Force
        Copy-Item -Path "build\windows\x64\runner\Release" -Destination "dist\$distName" -Recurse
        
        # Einfache README erstellen
        $readmeContent = "ESPP Manager f√ºr Windows`n========================`n`nStart: espp_manager.exe ausf√ºhren`nBei Sicherheitswarnung: 'Weitere Informationen' ‚Üí 'Trotzdem ausf√ºhren'`n`nCloud Sync und alle Features funktionieren wie auf macOS/iOS."
        $readmeContent | Out-File -FilePath "dist\$distName\README.txt" -Encoding UTF8

        Compress-Archive -Path "dist\$distName" -DestinationPath "dist\$distName.zip"
        
    - name: Upload Windows Build
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: dist/*.zip
        retention-days: 30

  build-web:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate real Firebase config for Web build
      run: |
        # Create complete Firebase config for web build using secrets
        cat > lib/config/firebase_config_web_production.dart << EOF
        import 'package:firebase_core/firebase_core.dart';
        
        class FirebaseConfig {
          static const FirebaseOptions web = FirebaseOptions(
            apiKey: '${{ secrets.FIREBASE_WEB_API_KEY }}',
            appId: '${{ secrets.FIREBASE_WEB_APP_ID }}',
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            measurementId: '${{ secrets.FIREBASE_MEASUREMENT_ID }}',
          );
          
          // Stub configurations for other platforms (not used in web build)
          static const FirebaseOptions ios = FirebaseOptions(
            apiKey: 'stub-key-not-used',
            appId: 'stub-app-id',
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            iosBundleId: 'com.miboomers.esppmanager',
          );
          
          static const FirebaseOptions macos = FirebaseOptions(
            apiKey: 'stub-key-not-used',
            appId: 'stub-app-id', 
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
            iosBundleId: 'com.miboomers.esppmanager',
            authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
          );
          
          static const FirebaseOptions windows = FirebaseOptions(
            apiKey: 'stub-key-not-used',
            appId: 'stub-app-id',
            messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
            projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
            authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
            storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
          );
        }
        EOF
        
        # Update loader to use real config for web build
        cat > lib/config/firebase_config_loader.dart << EOF
        // Production Firebase configuration loader for CI/CD web builds
        export 'firebase_config_web_production.dart';
        EOF
        
        echo "‚úÖ Using real Firebase config for web build"
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.0'
        channel: 'stable'
        
    - name: Enable Web & Install dependencies
      run: |
        flutter config --enable-web
        flutter pub get
        
    - name: Build Web Release
      run: flutter build web --release --base-href /ESPP_Manager/
      
    - name: Fix GitHub Pages routing
      run: |
        # Copy index.html to 404.html for SPA routing
        cp build/web/index.html build/web/404.html
        
        # Add .nojekyll file to prevent Jekyll processing
        touch build/web/.nojekyll
      
    - name: Package Web Build
      run: |
        DATE=$(date +%Y%m%d_%H%M)
        DIST_NAME="ESPP_Manager_Web_$DATE"
        
        mkdir -p dist
        cp -r build/web "dist/$DIST_NAME"
        
        # Create deployment instructions
        echo "# Web Deployment Instructions" > "dist/$DIST_NAME/DEPLOYMENT.md"
        echo "" >> "dist/$DIST_NAME/DEPLOYMENT.md"
        echo "## Local Testing:" >> "dist/$DIST_NAME/DEPLOYMENT.md"
        echo "1. cd DIST_NAME" >> "dist/$DIST_NAME/DEPLOYMENT.md"
        echo "2. python3 -m http.server 8000" >> "dist/$DIST_NAME/DEPLOYMENT.md"
        echo "3. Open: http://localhost:8000" >> "dist/$DIST_NAME/DEPLOYMENT.md"
        echo "" >> "dist/$DIST_NAME/DEPLOYMENT.md"
        echo "Features: Web App l√§uft komplett im Browser mit Cloud Sync" >> "dist/$DIST_NAME/DEPLOYMENT.md"
        
        cd dist && zip -r "$DIST_NAME.zip" "$DIST_NAME"
        
    - name: Upload Web Build
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: dist/*.zip
        retention-days: 30

    - name: Deploy to GitHub Pages (nur bei main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./build/web
        force_orphan: true
        enable_jekyll: false
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'

  create-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-windows, build-web]
    runs-on: ubuntu-latest
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-files
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: ESPP Manager ${{ github.ref_name }}
        body: |
          # ESPP Manager Release ${{ github.ref_name }}
          
          ## üì• Downloads
          
          ### Windows üíª
          - Download: `ESPP_Manager_Windows_*.zip`
          - Entpacken und `espp_manager.exe` starten
          
          ### Web üåê
          - Download: `ESPP_Manager_Web_*.zip`
          - Oder direkt online: https://${{ github.repository_owner }}.github.io/ESPP_Manager
          
          ## üî• Features
          - Employee Stock Purchase Plan Verwaltung
          - Deutsche Steuerberechnungen (Lohnsteuer + Kapitalertragsteuer)
          - PDF-Berichte f√ºr Finanzamt
          - Cloud Sync zwischen allen Plattformen
          - Fidelity CSV Import
          - AES-256 Verschl√ºsselung
          
          ---
          **macOS/iOS**: Builds √ºber Xcode/TestFlight verf√ºgbar
        files: release-files/**/*.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}